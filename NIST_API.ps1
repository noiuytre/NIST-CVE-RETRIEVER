param (
    [string]$CVE
)
# Check if $CVE is provided
if (-not $CVE) {
    Write-Host "Please provide a CVE as a parameter."
    exit
}
elseif ($CVE) {
    $CVE = $CVE.ToUpper()
}

# Define the Pattern
$pattern = "(.*?:){3}"

# Define the URL
$url = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=$CVE"
#Write-Output $CVE

# Make the web request and get the JSON response
$response = Invoke-RestMethod -Uri $url -Method Get
# Check if the response contains data
if ($response.resultsPerPage -gt 0) {
    # Parse the JSON data
    $cveId = $response.vulnerabilities.cve.id
    $publishedDate = $response.vulnerabilities.cve.published
    $formatedPublishedDate = [datetime]::Parse($publishedDate)
    $lastModifiedDate = $response.vulnerabilities.cve.lastModified
    $formatedLastModifiedDate = [datetime]::Parse($lastModifiedDate)
    $vulnStatus = $response.vulnerabilities.cve.vulnStatus
    $sourceIdentifier = $response.vulnerabilities.cve.sourceIdentifier
    $description = $response.vulnerabilities[0].cve.descriptions | Where-Object { $_.lang -eq 'en' } | Select-Object -ExpandProperty value
    $cvssString = $response.vulnerabilities[0].cve.metrics.cvssMetricV31[0].cvssData.vectorString
    $base = $response.vulnerabilities[0].cve.metrics.cvssMetricV31[0].cvssData.baseScore.ToString() + " " + $response.vulnerabilities[0].cve.metrics.cvssMetricV31[0].cvssData.baseSeverity
    $exploitabilityScore = $response.vulnerabilities[0].cve.metrics.cvssMetricV31[0].exploitabilityScore
    $impactScore = $response.vulnerabilities[0].cve.metrics.cvssMetricV31[0].impactScore
    $CWE = $response.vulnerabilities[0].cve.weaknesses.description | Where-Object { $_.lang -eq 'en' } | Select-Object -ExpandProperty value
    $CVE_details_link = $response.vulnerabilities[0].cve.references.url
    $CVE_tags = $response.vulnerabilities[0].cve.references[0].tags
    $impacted_systems = $response.vulnerabilities[0].cve.affects.vendor.vendor_data.product.product_data | Select-Object -ExpandProperty product_name
    $cisaExploitAdd = $response.vulnerabilities[0].cve.cisaExploitAdd
    $cisaActionDue =$response.vulnerabilities[0].cve.cisaActionDue
    $cisaRequiredAction = $response.vulnerabilities[0].cve.cisaRequiredAction
    $cisaVulnerabilityName = $response.vulnerabilities[0].cve.cisaVulnerabilityName

    # Output the parsed data
    Write-Host "`r`nCVE ID: $cveId"
    Write-Host "Published Date: $formatedPublishedDate"
    Write-Host "Last Modified Date: $formatedLastModifiedDate"
    Write-Host "Source Identifier: $sourceIdentifier"
    Write-Host "Vulnerability Status: $vulnStatus"
    Write-Host "Description: $description"
    Write-Host "CVE String: $cvssString"
    Write-Host "Base Score and Impact: $base"
    Write-Host "Exploitability Score: $exploitabilityScore"
    Write-Host "Impact Score: $impactScore"
    Write-Host "CWE: $CWE"
    # Output CISA fields if they exist
    if ($cisaExploitAdd) {
        Write-Output "`r`nCISA Exploit Add: $cisaExploitAdd"
    }

    if ($cisaActionDue) {
        Write-Output "CISA Action Due: $cisaActionDue"
    }

    if ($cisaRequiredAction) {
        Write-Output "CISA Required Action: $cisaRequiredAction"
    }

    if ($cisaVulnerabilityName) {
        Write-Output "CISA Vulnerability Name: $cisaVulnerabilityName`r`n"
    }
    Write-Host "CVE Details Link: $CVE_details_link"
    Write-Host "Tags associated with the link: $($CVE_tags -join ', ')`r`n"
    Write-Host "Impacted Systems: $($impacted_systems -join ', ')`r`n"
    foreach ($node in $response.vulnerabilities.cve.configurations.nodes) {
        foreach ($cpe in $node.cpeMatch) {
	    #regex to delete: cpe:<cpe_version>:<part>:
	    $tempCPE = $cpe.criteria -replace '^([^:]*:[^:]*:[^:]*:)', ''
	    #Regex to keep only the important part
	    $secondCPE = $tempCPE -replace '.[*-]'
	    #Replace : by " "
	    $finalCPE = $secondCPE -replace ":", "/"
            Write-Output ". $($finalCPE)"
            if ($cpe.PSObject.Properties.Name -contains "versionStartIncluding") {
                Write-Output "From (Including): $($cpe.versionStartIncluding)"
            }
	        if ($cpe.PSObject.Properties.Name -contains "versionStartExcluding") {
                Write-Output "From (Excluding): $($cpe.versionStartExcluding)"
            }
	        if ($cpe.PSObject.Properties.Name -contains "versionEndIncluding") {
                Write-Output "Up to (Including): $($cpe.versionEndIncluding)"
            }
            if ($cpe.PSObject.Properties.Name -contains "versionEndExcluding") {
                Write-Output "Up to (Excluding): $($cpe.versionEndExcluding)"
            }
        }
    }


} else {
    Write-Host "Error: Unable to retrieve CVE information. /or/ No CVE found."
}
